class Solution {
    public int incremovableSubarrayCount(int[] nums) {
        int n = nums.length;
        int result = 0;

        for (int i = 0; i < n; i++) {
            int minInSubarray = nums[i];
            Set<Integer> seen = new HashSet<>();
            seen.add(nums[i]);

            // Extend the subarray to the right
            for (int j = i + 1; j < n; j++) {
                if (nums[j] <= minInSubarray) {
                    // The subarray cannot be extended, break the loop
                    break;
                }

                seen.add(nums[j]);

                // Check if the elements to the left of the subarray can be removed
                if (canRemoveLeft(nums, i, j, seen)) {
                    result++;
                }
            }
        }

        return result;
    }

    private boolean canRemoveLeft(int[] nums, int start, int end, Set<Integer> seen) {
        for (int k = start - 1; k >= 0; k--) {
            if (!seen.contains(nums[k])) {
                return false;
            }
        }
        return true; 
    }
}
