class Solution {
    public List<String> topKFrequent(String[] words, int k) {
        // Count the frequency of each word
        Map<String, Integer> wordFreq = new HashMap<>();
        for (String word : words) {
            wordFreq.put(word, wordFreq.getOrDefault(word, 0) + 1);
        }

        // Use a PriorityQueue to sort words by frequency and lexicographical order
        PriorityQueue<String> pq = new PriorityQueue<>(
                (w1, w2) -> wordFreq.get(w1).equals(wordFreq.get(w2)) ?
                        w2.compareTo(w1) : wordFreq.get(w1) - wordFreq.get(w2)
        );

        // Add words to the PriorityQueue
        for (String word : wordFreq.keySet()) {
            pq.offer(word);
            if (pq.size() > k) {
                pq.poll(); // Keep the size of the PriorityQueue to k
            }
        }

        // Build the result list
        List<String> result = new ArrayList<>();
        while (!pq.isEmpty()) {
            result.add(pq.poll());
        }

        // Reverse the result list to have the highest frequency first
        Collections.reverse(result);

        return result;
    
    }
}
