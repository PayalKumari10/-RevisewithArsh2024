class Solution {
    int mod = (int)1e9+7;
    public int numberOfWays(int startPos, int endPos, int k) {
        if((endPos-startPos)>k) return 0;
        int[][] dp = new int[3000][k+1];
        for(int[] a: dp)    Arrays.fill(a, -1);
        
        return helper(startPos, endPos, k, dp);
    }
    public int helper(int startPos, int endPos, int k,int[][] dp) {
        if(k==0  ){
            if(startPos == endPos)
                return 1; 
            return 0;
        }
        if(dp[startPos+1000][k]!=-1) return dp[startPos+1000][k];
        int ans = helper(startPos + 1, endPos, k - 1, dp) ;
        if((k-1)>= (endPos - startPos +1))
            ans += helper(startPos - 1, endPos, k - 1, dp) ;
        return dp[startPos+1000][k]=ans%mod;
    }
}
