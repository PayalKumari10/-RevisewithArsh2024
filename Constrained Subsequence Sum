class Solution {
    public int constrainedSubsetSum(int[] nums, int k) {
        int n = nums.length;
        int[] dp = new int[n];
        int result = Integer.MIN_VALUE;

        Deque<Integer> deque = new ArrayDeque<>();

        for (int i = 0; i < n; i++) {
            // Remove elements outside the window
            while (!deque.isEmpty() && deque.peekFirst() < i - k) {
                deque.pollFirst();
            }

            // Choose the maximum between the current element, or the sum of the maximum subsequence so far and the current element
            dp[i] = Math.max(nums[i], nums[i] + (deque.isEmpty() ? 0 : dp[deque.peekFirst()]));

            // Update the result with the maximum subsequence sum
            result = Math.max(result, dp[i]);

            // Remove elements that are smaller than the current element, as they won't contribute to a larger sum
            while (!deque.isEmpty() && dp[i] >= dp[deque.peekLast()]) {
                deque.pollLast();
            }

            // Add the current index to the deque
            deque.offerLast(i);
        }

        return result;
    
    }
}
